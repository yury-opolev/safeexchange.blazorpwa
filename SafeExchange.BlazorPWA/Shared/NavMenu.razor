@using SafeExchange.Client.Web.Components

@inject StateContainer StateContainerInstance

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">&nbsp; SafeExchange</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" role="navigation" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLinkAccessibility class="nav-link" href="" ActiveAttributes="ActiveAttributes" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLinkAccessibility>
        </li>
        <li class="nav-item px-3">
            <NavLinkAccessibility class="nav-link" href="createdata" ActiveAttributes="ActiveAttributes">
                <span class="oi oi-plus" aria-hidden="true"></span> Add Secret
            </NavLinkAccessibility>
        </li>
        <li class="nav-item px-3">
            <NavLinkAccessibility class="nav-link" href="listdata" ActiveAttributes="ActiveAttributes">
                <span class="oi oi-book" aria-hidden="true"></span> My Secrets
            </NavLinkAccessibility>
        </li>
        <AuthorizeView>
            <Authorized>
                <li><hr class="dropdown-divider"></li>
                <li class="nav-item px-3">
                    <NavLinkAccessibility class="nav-link" href="accessrequests" ActiveAttributes="ActiveAttributes">
                        <span class="oi oi-people" aria-hidden="true"></span> My Requests &nbsp;
                        @if (this.StateContainerInstance.IsFetchingAccessRequests)
                        {
                            <span class="spinner-border spinner-border-sm text-light" role="status"></span>
                        }
                        else
                        {
                            if (this.StateContainerInstance.IncomingAccessRequestsCount > 0)
                            {
                                <span class="badge badge-pill badge-danger">@(this.StateContainerInstance.IncomingAccessRequestsCount)</span><span>&nbsp;</span>
                            }
                            if (this.StateContainerInstance.OutgoingAccessRequestsCount > 0)
                            {
                                <span class="badge badge-pill badge-light">@(this.StateContainerInstance.OutgoingAccessRequestsCount)</span>
                            }
                        }
                    </NavLinkAccessibility>
                </li>
                <li class="nav-item px-3">
                    <NavLinkAccessibility class="nav-link" href="addrequest" ActiveAttributes="ActiveAttributes">
                        <span class="oi oi-bell" aria-hidden="true"></span> Add Request
                    </NavLinkAccessibility>
                </li>
                @if (this.StateContainerInstance.IsAdministrator)
                {
                <li><hr class="dropdown-divider"></li>
                <li class="nav-item px-3">
                    <NavLinkAccessibility class="nav-link" href="admin/configuration" ActiveAttributes="ActiveAttributes">
                        <span class="oi oi-cog" aria-hidden="true"></span> Configuration
                    </NavLinkAccessibility>
                </li>
                }
            </Authorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private Dictionary<string, object> ActiveAttributes { get; set; } = new Dictionary<string, object>() { { "aria-current", "page" } };

    protected override void OnInitialized()
    {
        StateContainerInstance.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StateContainerInstance.OnChange -= StateHasChanged;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
