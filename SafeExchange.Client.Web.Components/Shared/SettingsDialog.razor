@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

@inject NotificationsSubscriber subscriber

<!-- Modal -->
<div class="modal fade" id="settingsDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mx-2 settings-row">
                    <div>Notifications:</div>
                    <div>
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-outline-primary @(this.IsSubscribed ? "active" : "")">
                                <input type="button" name="options" disabled="@this.IsInProgress" @onclick="@(e => this.SubscribeAsync())"> Enabled
                            </label>
                            <label class="btn btn-outline-primary @(this.IsSubscribed ? "" : "active")">
                                <input type="button" name="options" disabled="@this.IsInProgress" @onclick="@(e => this.UnsubscribeAsync())"> Disabled
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool IsSubscribed { get; set; }

    private bool IsInProgress { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsSubscribed = await subscriber.IsSubscribed();
        this.IsInProgress = false;
    }

    private async Task SubscribeAsync()
    {
        if (this.IsSubscribed)
        {
            return;
        }

        this.IsInProgress = true;
        try
        {
            var subscription = await subscriber.Subscribe();
            this.IsSubscribed = true;
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }
    }

    private async Task UnsubscribeAsync()
    {
        if (!this.IsSubscribed)
        {
            return;
        }

        this.IsInProgress = true;
        try
        {
            await subscriber.Unsubscribe();
            this.IsSubscribed = false;
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }
    }
}
