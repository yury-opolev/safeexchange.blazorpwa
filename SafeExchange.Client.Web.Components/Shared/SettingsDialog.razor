@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using SafeExchange.Client.Web.Components.Classes.Model
@using SafeExchange.Client.Web.Components.Model;

@inject NotificationsSubscriber subscriber
@inject ColorThemeHelper colorThemeHelper

<div class="modal fade" id="settingsDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <p class="modal-title" id="modalLabel"><strong>Settings</strong></p>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm class="px-4 py-2" EditContext="@editContext">
                    <div class="row gy-2">
                        <div class="px-0">Theme:</div>
                        <div Name="colorThemeRadioGroup" aria-label="Color theme picker">
                            <div class="py-2 form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="lightThemeSwitch" disabled="@this.IsInProgress" @bind="this.colorThemeContext.IsLightSelected" />
                                <label class="form-check-label" for="lightThemeSwitch">&nbsp;<i class="bi bi-sun"></i>&nbsp; Light</label>
                            </div>

                            <div class="py-2 form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="lightThemeSwitch" disabled="@this.IsInProgress" @bind="this.colorThemeContext.IsDarkSelected" />
                                <label class="form-check-label" for="lightThemeSwitch">&nbsp; <i class="bi bi-moon"></i>&nbsp; Dark</label>
                            </div>

                            <div class="py-2 form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="lightThemeSwitch" disabled="@this.IsInProgress" @bind="this.colorThemeContext.IsAutoSelected" />
                                <label class="form-check-label" for="lightThemeSwitch">&nbsp; <i class="bi bi-circle-half"></i>&nbsp; Auto</label>
                            </div>
                        </div>
                    </div>
                </EditForm>
                @if (this.IsInProgress)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="sr-only">Applying...</span>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(this.AlertMessage))
                {
                    <div class="alert alert-warning" role="alert">
                        <strong>@this.AlertHeader</strong>&nbsp; @this.AlertMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@this.IsInProgress">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool IsInProgress { get; set; }

    private string AlertHeader { get; set; }

    private string AlertMessage { get; set; }

    private ColorThemeContext colorThemeContext;

    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        this.colorThemeContext = new ColorThemeContext();
        this.colorThemeContext.OnValueChangedAsync = OnColorThemeChangedAsync;
        this.editContext = new EditContext(this.colorThemeContext);

        var preferredTheme = await colorThemeHelper.GetPreferredThemeAsync();
        this.colorThemeContext.Value = preferredTheme;

        await this.colorThemeHelper.SetThemeAsync(preferredTheme);

        this.IsInProgress = false;
        this.StateHasChanged();
    }

    private async Task OnColorThemeChangedAsync(ColorTheme theme)
    {
        await colorThemeHelper.SetThemeAsync(theme);
    }
}
