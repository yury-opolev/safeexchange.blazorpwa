@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

@inject NotificationsSubscriber subscriber

<!-- Modal -->
<div class="modal fade" id="settingsDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mx-2 settings-row">
                    <div>Notifications:</div>
                    <div>
                        <div class="btn-group btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="options" id="enableNotifications"> Enable
                            </label>
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="options" id="disableNotifications" checked> Disable
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    private async Task<bool> IsSubscribedAsync()
    {
        return await subscriber.IsSubscribed();
    }

    private async Task RequestNotificationSubscriptionAsync()
    {
        try
        {
            var subscription = await subscriber.Subscribe();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private async Task DeleteNotificationSubscriptionAsync()
    {
        try
        {
            await subscriber.Unsubscribe();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}
