@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using SafeExchange.Client.Web.Components.Model;

@inject NotificationsSubscriber subscriber
<!-- Modal -->
<div class="modal fade" id="settingsDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <p class="modal-title" id="modalLabel"><strong>Settings</strong></p>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mx-2">
                    <EditForm Model="@this.SubState">
                        <div>Notifications:</div>
                        <div class="my-2 mx-4">
                            <InputRadioGroup @bind-Value="this.SubState">
                                <InputRadio Value="SubscriptionState.Subscribed" disabled="@this.IsInProgress" /> Enabled
                                <br>
                                <InputRadio Value="SubscriptionState.NotSubscribed" disabled="@this.IsInProgress" /> Disabled
                            </InputRadioGroup>
                        </div>
                    </EditForm>
                </div>
                @if (this.IsInProgress)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="sr-only">Applying...</span>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(this.AlertMessage))
                {
                    <div class="alert alert-warning" role="alert">
                        <strong>@this.AlertHeader</strong>&nbsp; @this.AlertMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" disabled="@this.IsInProgress" >Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    private SubscriptionState subState;

    private SubscriptionState SubState
    {
        get => this.subState;

        set
        {
            if (value == this.subState)
            {
                return;
            }

            _ = this.OnSubscriptionChangeAsync(value);
        }
    }

    private bool IsInProgress { get; set; }

    private string AlertHeader { get; set; }

    private string AlertMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isSubscribed = await subscriber.IsSubscribed();
        this.subState = isSubscribed ? SubscriptionState.Subscribed : SubscriptionState.NotSubscribed;
        this.IsInProgress = false;
    }

    private async Task OnSubscriptionChangeAsync(SubscriptionState updatedState)
    {
        if (updatedState == SubscriptionState.Subscribed)
        {
            await this.SubscribeAsync();
        }
        else
        {
            await this.UnsubscribeAsync();
        }
    }

    private async Task SubscribeAsync()
    {
        var resultingState = SubscriptionState.NotSubscribed;
        this.IsInProgress = true;
        this.AlertMessage = string.Empty;
        try
        {
            var result = await subscriber.Subscribe();
            if (result.Status == "ok")
            {
                resultingState = SubscriptionState.Subscribed;
            }
            else
            {
                this.AlertHeader = result.Status;
                this.AlertMessage = result.Error;
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            this.AlertHeader = "exception";
            this.AlertMessage = ex.Message;
        }
        finally
        {
            this.subState = resultingState;
            this.IsInProgress = false;
            this.StateHasChanged();
        }
    }

    private async Task UnsubscribeAsync()
    {
        var resultingState = SubscriptionState.Subscribed;
        this.IsInProgress = true;
        this.AlertMessage = string.Empty;
        try
        {
            var result = await subscriber.Unsubscribe();
            if (result.Status == "ok")
            {
                resultingState = SubscriptionState.NotSubscribed;
            }
            else
            {
                this.AlertHeader = result.Status;
                this.AlertMessage = result.Error;
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            this.AlertHeader = "exception";
            this.AlertMessage = ex.Message;
        }
        finally
        {
            this.subState = resultingState;
            this.IsInProgress = false;
            this.StateHasChanged();
        }
    }
}
