@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using SafeExchange.Client.Web.Components.Classes.Model
@using SafeExchange.Client.Web.Components.Model;

@inject NotificationsSubscriber subscriber

<div class="modal fade" id="settingsDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <p class="modal-title" id="modalLabel"><strong>Settings</strong></p>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="px-4 py-2">
                    <div class="row gy-2">
                        <div class="px-0">Theme:</div>
                        <div class="btn-group" role="group" aria-label="Color theme picker">
                            <input type="radio" class="btn-check" name="btnradio" id="lightThemeSwitch" autocomplete="off" checked disabled="@this.IsInProgress" @bind-value:get="@this.colorThemes[0].IsSelected" @bind-value:set="(c) => this.OnColorThemeChangedAsync(ColorTheme.Light)">
                            <label class="btn btn-outline-primary" for="lightThemeSwitch">
                                &nbsp; <i class="bi bi-sun"></i>
                                &nbsp; Light
                            </label>

                            <input type="radio" class="btn-check" name="btnradio" id="darkThemeSwitch" autocomplete="off" disabled="@this.IsInProgress" @bind-value:get="@this.colorThemes[1].IsSelected" @bind-value:set="(c) => this.OnColorThemeChangedAsync(ColorTheme.Dark)" >
                            <label class="btn btn-outline-primary" for="darkThemeSwitch">
                                &nbsp; <i class="bi bi-moon"></i>
                                &nbsp; Dark
                            </label>

                            <input type="radio" class="btn-check" name="btnradio" id="autoThemeSwitch" autocomplete="off" disabled="@this.IsInProgress" @bind-value:get="@this.colorThemes[2].IsSelected" @bind-value:set="(c) => this.OnColorThemeChangedAsync(ColorTheme.Auto)" >
                            <label class="btn btn-outline-primary" for="autoThemeSwitch">
                                &nbsp; <i class="bi bi-circle-half"></i>
                                &nbsp; Auto
                            </label>
                        </div>
                    </div>
                </div>
                @if (this.IsInProgress)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="sr-only">Applying...</span>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(this.AlertMessage))
                {
                    <div class="alert alert-warning" role="alert">
                        <strong>@this.AlertHeader</strong>&nbsp; @this.AlertMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@this.IsInProgress" >Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool IsInProgress { get; set; }

    private string AlertHeader { get; set; }

    private string AlertMessage { get; set; }

    private List<CheckableEnum<ColorTheme>> colorThemes = new List<CheckableEnum<ColorTheme>>();

    protected override async Task OnInitializedAsync()
    {
        this.colorThemes = new List<CheckableEnum<ColorTheme>>();
        this.colorThemes.Add(new CheckableEnum<ColorTheme>() { IsSelected = true, Value = ColorTheme.Light });
        this.colorThemes.Add(new CheckableEnum<ColorTheme>() { Value = ColorTheme.Dark });
        this.colorThemes.Add(new CheckableEnum<ColorTheme>() { Value = ColorTheme.Auto });

        this.IsInProgress = false;
    }

    private async Task OnColorThemeChangedAsync(ColorTheme theme)
    {
        Console.WriteLine($"STATE: {theme}");
        await Task.CompletedTask;
    }
}
