@using System.Timers
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Options
@using SafeExchange.Client.Common.Model
@using SafeExchange.Client.Web.Components.Model

@implements IDisposable

@typeparam TItem where TItem : class

@inject NavigationManager NavManager
@inject ItemPickDialogHelper itemPickDialogHelper
@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> OptionsSnapshot
@inject IConfiguration Configuration

<div class="modal fade" @ref="this.modalDialog" id="itemPickDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <p class="modal-title" id="modalLabel"><strong>@this.DialogTitle</strong></p>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="this.OnStopItemSearch"></button>
            </div>

            <div class="modal-body d-flex flex-column" style="height: 320px;">
                @if (this.Notification != null)
                {
                    <div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
                        <p>
                            <strong>@(this.Notification.Status ?? string.Empty)</strong>&nbsp; @(this.Notification.Message ?? string.Empty)
                        </p>
                        @if (!string.IsNullOrEmpty(this.Notification.ButtonText))
                        {
                            <hr>
                            <p>
                                <button class="btn btn-warning" type="button" disabled="@this.searchIsInProgress" @onclick="() => this.HandleNotificationButtonClick()">
                                    <span>@this.Notification.ButtonText</span>
                                </button>
                            </p>
                        }
                        <button type="button" class="btn-close" @onclick="(e) => { this.Notification = null; }" aria-label="Close"></button>
                    </div>
                }

                @if (this.UsePinnedItems)
                {
                    <ul class="nav nav-tabs" id="mainContentTabs" role="tablist">
                        <li class="nav-item">
                            <button class="nav-link active" id="pinned-items-tab" data-bs-toggle="tab" data-bs-target="#pinned-items" type="button" role="tab" aria-controls="pinned-items" aria-selected="true" @onclick="() => this.SetActiveTab(PinnedItemsTabIndex)">
                                Pinned items
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" id="search-tab" data-bs-toggle="tab" data-bs-target="#search" type="button" role="tab" aria-controls="search" aria-selected="false" @onclick="() => this.SetActiveTab(SearchTabIndex)">
                                Search
                            </button>
                        </li>
                    </ul>
                    <div class="tab-content py-2" id="mainContent">
                        <div class="tab-pane fade show active" id="pinned-items" role="tabpanel" aria-labelledby="pinned-items-tab">
                            @if (this.listPinnedIsInProgress)
                            {
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">
                                        <div class="px-2">
                                            <div>
                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            }
                            else
                            {
                                @if (this.pinnedItems.Count > 0)
                                {
                                    <ul class="list-group list-group-flush">
                                        @for (int i = 0; i < this.pinnedItems.Count; i++)
                                        {
                                            var pinnedItemIndex = i;
                                            var pinnedItem = this.pinnedItems[i];
                                            <div class="btn btn-outline-primary-noborder btn-text-align-left d-flex @(this.selectedPinnedItemIndex == pinnedItemIndex ? "active" : "")" aria-current="@(this.selectedPinnedItemIndex == pinnedItemIndex ? "true" : null)" @onclick="() => this.SwitchSelectedPinnedItem(pinnedItemIndex)">
                                                <div class="w-80">
                                                    @ItemTemplate(pinnedItem)
                                                </div>
                                                <button type="button" class="ms-auto btn btn-link @(this.selectedPinnedItemIndex == pinnedItemIndex ? "text-white" : "text-primary")" @onclick:stopPropagation="true" @onclick="() => this.SwitchItemPinAsync(pinnedItem, false)">
                                                    <i class="bi bi-star-fill"></i>
                                                </button>
                                            </div>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">
                                            <div class="px-2">
                                                <div>
                                                    - No pinned items -
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                }
                            }
                        </div>
                        <div class="tab-pane fade" id="search" role="tabpanel" aria-labelledby="search-tab">
                            <p>
                                <input class="form-control" disabled="@(this.searchIsInProgress || this.listPinnedIsInProgress)" placeholder="@this.Placeholder" @bind="this.searchString" @bind:event="oninput" @bind:after="@this.ResetSearchTimer" />
                            </p>
                            <div class="overflow-auto">
                                @if (this.searchIsInProgress)
                                {
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">
                                            <div class="px-2">
                                                <div>
                                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                }
                                else
                                {
                                    @if (this.itemsFound.Count > 0)
                                    {
                                        <ul class="list-group list-group-flush">
                                            @for (int i = 0; i < this.itemsFound.Count; i++)
                                            {
                                                var foundItemIndex = i;
                                                var foundItem = this.itemsFound[i];
                                                <div class="btn btn-outline-primary-noborder btn-text-align-left d-flex @(this.selectedFoundItemIndex == foundItemIndex ? "active" : "")" aria-current="@(this.selectedFoundItemIndex == foundItemIndex ? "true" : null)" @onclick="() => this.SwitchSelectedItem(foundItemIndex)">
                                                    <div class="w-80">
                                                        @ItemTemplate(foundItem.item)
                                                    </div>
                                                    <button type="button" class="ms-auto btn btn-link @(this.selectedFoundItemIndex == foundItemIndex ? "text-white" : "text-primary")" @onclick:stopPropagation="true" @onclick="() => this.SwitchItemPinAsync(foundItem.item, !foundItem.isPinned)">
                                                        @if (foundItem.isPinned)
                                                        {
                                                            <i class="bi bi-star-fill"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-star"></i>
                                                        }
                                                    </button>
                                                </div>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <ul class="list-group list-group-flush">
                                            <li class="list-group-item">
                                                <div class="px-2">
                                                    <div>
                                                        - No data -
                                                    </div>
                                                </div>
                                            </li>
                                        </ul>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>
                        <input class="form-control" disabled="@this.searchIsInProgress" placeholder="@this.Placeholder" @bind="this.searchString" @bind:event="oninput" @bind:after="@this.ResetSearchTimer" />
                    </p>
                    <div class="overflow-auto">
                        @if (this.searchIsInProgress)
                        {
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <div class="px-2">
                                        <div>
                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        }
                        else
                        {
                            @if (this.itemsFound.Count > 0)
                            {
                                <ul class="list-group list-group-flush">
                                    @for (int i = 0; i < this.itemsFound.Count; i++)
                                    {
                                        var foundItemIndex = i;
                                        var foundItem = this.itemsFound[i];
                                        <div class="btn btn-outline-primary-noborder btn-text-align-left d-flex @(this.selectedFoundItemIndex == foundItemIndex ? "active" : "")" aria-current="@(this.selectedFoundItemIndex == foundItemIndex ? "true" : null)" @onclick="() => this.SwitchSelectedItem(foundItemIndex)">
                                            <div class="w-100">
                                                @ItemTemplate(foundItem.item)
                                            </div>
                                        </div>
                                    }
                                </ul>
                            }
                            else
                            {
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">
                                        <div class="px-2">
                                            <div>
                                                - No data -
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            }
                        }
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" @onclick="this.OnStopItemSearch">Cancel</button>
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" disabled="@(this.GetSelectedItem() == default)" @onclick="this.FinishUserPick">OK</button>
            </div>
        </div>
    </div>
</div>

@code {

    private const int PinnedItemsTabIndex = 0;
    private const int SearchTabIndex = 1;

    [Parameter]
    public bool UsePinnedItems { get; set; } = false;

    [Parameter]
    public string DialogTitle { get; set; } = string.Empty;

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = default!;

    [Parameter]
    public Action<TItem> OnItemPickedCallback { get; set; }

    [Parameter]
    public Func<SearchInput, Task<BaseResponseObject<List<TItem>>>> SearchItemsAsyncCallback { get; set; }

    [Parameter]
    public Func<Task<BaseResponseObject<List<TItem>>>> ListPinnedItemsAsyncCallback { get; set; }

    [Parameter]
    public Func<TItem, bool, Task<BaseResponseObject<TItem>>> SwitchItemPinAsyncCallback { get; set; }

    [Parameter]
    public Action OnClosedCallback { get; set; }

    private NotificationData Notification;

    private ElementReference modalDialog;

    private Timer searchTimer = new Timer(TimeSpan.FromSeconds(1)) { AutoReset = false };

    private bool searchIsInProgress = false;
    private string searchString = string.Empty;
    private string latestSearchString = string.Empty;

    private int selectedFoundItemIndex = -1;
    private List<(TItem item, bool isPinned)> itemsFound = [];

    private bool listPinnedIsInProgress = false;
    private int selectedPinnedItemIndex = -1;
    private List<TItem> pinnedItems = [];

    private int currentTabIndex;

    public void Dispose()
    {
        this.searchTimer?.Dispose();
    }

    public async Task StartItemSearchAsync()
    {
        this.searchString = string.Empty;
        this.latestSearchString = string.Empty;
        this.itemsFound = [];
        this.selectedFoundItemIndex = -1;

        await this.itemPickDialogHelper.ShowModalAsync(this.modalDialog);

        this.selectedPinnedItemIndex = -1;
        await this.TryListPinnedItemsAsync();
    }

    protected override void OnInitialized()
    {
        this.currentTabIndex = this.UsePinnedItems ? PinnedItemsTabIndex : SearchTabIndex;
        this.searchTimer.Elapsed += OnTimerElapsed;
    }

    public void OnStopItemSearch()
    {
        this.OnClosedCallback?.Invoke();
    }

    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (!this.QualifiesAsNewSearch(this.searchString))
        {
            return;
        }

        this.selectedFoundItemIndex = -1;
        this.itemsFound = [];

        if (!this.IsSufficientSearchString(this.searchString))
        {
            this.latestSearchString = string.Empty;
            this.StateHasChanged();
            return;
        }

        await this.SearchItemsAsync(this.latestSearchString);
    }

    private bool QualifiesAsNewSearch(string searchString)
    {
        searchString = searchString.Trim().ToLower();
        if (string.Equals(searchString, this.latestSearchString))
        {
            return false;
        }

        this.latestSearchString = searchString;
        return true;
    }

    private bool IsSufficientSearchString(string searchString) => searchString.Length > 2;

    private async Task SearchItemsAsync(string searchString)
    {
        this.searchIsInProgress = true;
        this.StateHasChanged();

        try
        {
            this.itemsFound = [];
            var serchInput = new SearchInput() { SearchString = searchString };
            var itemsResult = await this.SearchItemsAsyncCallback?.Invoke(serchInput) ?? new BaseResponseObject<List<TItem>>() { Result = [] };
            if (!"ok".Equals(itemsResult.Status) && !"no_content".Equals(itemsResult.Status))
            {
                var consentRequired = false;
                var message = itemsResult.Error ?? string.Empty;
                var buttonText = "forbidden".Equals(itemsResult.Status) ? "Consent" : string.Empty;
                if ("consent_required".Equals(itemsResult.SubStatus))
                {
                    consentRequired = true;
                    message = "User must give consent in Entra to read all users basic profiles in order to search users.";
                    buttonText = "Consent";
                }

                this.Notification = new NotificationData()
                    {
                        Type = NotificationType.Warning,
                        Status = itemsResult.Status,
                        Message = message,
                        ButtonText = buttonText,
                        ButtonUri = "/",
                        ConsentRequired = consentRequired
                    };

                return;
            }

            this.itemsFound = itemsResult.Result?.Select(x => (item: x, isPinned: this.IsPinnedItem(x))).ToList() ?? Array.Empty<(TItem item, bool isPinned)>().ToList();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.searchIsInProgress = false;
            this.StateHasChanged();
        }
    }

    private void SwitchSelectedItem(int itemIndex) => this.selectedFoundItemIndex = this.selectedFoundItemIndex == itemIndex ? -1 : itemIndex;

    private void SwitchSelectedPinnedItem(int itemIndex) => this.selectedPinnedItemIndex = this.selectedPinnedItemIndex == itemIndex ? -1 : itemIndex;

    private async Task SwitchItemPinAsync(TItem item, bool newPinnedValue)
    {
        Console.WriteLine($"{nameof(SwitchItemPinAsync)}: {item}, new pinned value: {newPinnedValue}");
        await Task.CompletedTask;
    }

    private void FinishUserPick()
    {
        var selectedItem = this.GetSelectedItem();
        if (selectedItem != default)
        {
            this.OnItemPickedCallback?.Invoke(selectedItem);
        }

        this.OnStopItemSearch();
    }

    private void ResetSearchTimer()
    {
        this.searchTimer.Stop();
        this.searchTimer.Start();
    }

    private void HandleNotificationButtonClick()
    {
        if (this.Notification.ConsentRequired)
        {
            var scopesToConsent = new List<string>();
            this.Configuration.Bind("AdditionalScopesToConsent", scopesToConsent);
            var requestOptions = new InteractiveRequestOptions
                {
                    Interaction = InteractionType.GetToken,
                    ReturnUrl = this.NavManager.Uri,
                    Scopes = scopesToConsent ?? Array.Empty<string>().ToList()
                };

            requestOptions.TryAddAdditionalParameter("prompt", "consent");
            this.NavManager.NavigateToLogin(OptionsSnapshot.Get(Options.DefaultName).AuthenticationPaths.LogInPath, requestOptions);
            return;
        }

        this.NavManager.NavigateTo(this.Notification.ButtonUri);
    }

    private async Task TryListPinnedItemsAsync()
    {
        if (!this.UsePinnedItems)
        {
            return;
        }

        this.listPinnedIsInProgress = true;
        this.StateHasChanged();

        try
        {
            var pinnedItemsResponse = await this.ListPinnedItemsAsyncCallback();
            if (!"ok".Equals(pinnedItemsResponse.Status) && !"no_content".Equals(pinnedItemsResponse.Status))
            {
                var consentRequired = false;
                var message = pinnedItemsResponse.Error ?? string.Empty;
                var buttonText = "forbidden".Equals(pinnedItemsResponse.Status) ? "Consent" : string.Empty;
                if ("consent_required".Equals(pinnedItemsResponse.SubStatus))
                {
                    consentRequired = true;
                    message = "User must give consent in Entra to read all users basic profiles in order to search users.";
                    buttonText = "Consent";
                }

                this.Notification = new NotificationData()
                    {
                        Type = NotificationType.Warning,
                        Status = pinnedItemsResponse.Status,
                        Message = message,
                        ButtonText = buttonText,
                        ButtonUri = "/",
                        ConsentRequired = consentRequired
                    };

                return;
            }

            this.pinnedItems = pinnedItemsResponse.Result?.ToList() ?? Array.Empty<TItem>().ToList();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.listPinnedIsInProgress = false;
            this.StateHasChanged();
        }
    }

    private void SetActiveTab(int tabIndex)
    {
        this.currentTabIndex = tabIndex;
    }

    private TItem? GetSelectedItem()
    {
        switch (this.currentTabIndex)
        {
            case PinnedItemsTabIndex:
                return this.selectedPinnedItemIndex >= 0 ? this.pinnedItems[this.selectedPinnedItemIndex] : default;

            case SearchTabIndex:
                return this.selectedFoundItemIndex >= 0 ? this.itemsFound[this.selectedFoundItemIndex].item : default;

            default:
                return default;
        }
    }

    private bool IsPinnedItem(TItem item) => this.pinnedItems.Contains(item);
}
