@using SafeExchange.Client.Common
@using SafeExchange.Client.Common.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SafeExchange.Client.Web.Components.Helpers
@using SafeExchange.Client.Web.Components.Model

@inject StateContainer StateContainer
@inject ApiClient apiClient

<!-- Modal -->
<div class="modal fade" id="cancellationDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <p class="modal-title" id="modalLabel"><strong>Cancel request</strong></p>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to cancel the request?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@(e => this.CancelAccessRequestAsync())">Proceed</button>
            </div>
        </div>
    </div>
</div>

@if (this.Notification != null)
{
    <div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <strong>@(this.Notification.Status ?? string.Empty)</strong> @(this.Notification.Message ?? string.Empty)
        <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
    </div>
}

@if (this.IncomingAccessRequests != null)
{
    <div class="container-fluid">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
                <button class="nav-link active" id="incoming-tab" data-bs-toggle="tab" data-bs-target="#incoming" type="button" role="tab" aria-controls="incoming" aria-selected="true">Incoming</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" id="outgoing-tab" data-bs-toggle="tab" data-bs-target="#outgoing" type="button" role="tab" aria-controls="outgoing" aria-selected="false">Outgoing</button>
            </li>
        </ul>
        <div class="tab-content py-2 px-2" id="myTabContent">
            <div class="tab-pane fade show active" id="incoming" role="tabpanel" aria-labelledby="incoming-tab">
                <ul class="list-group list-group-flush">
                    @foreach (var accessRequest in this.IncomingAccessRequests)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                            <div>
                                <div>@(accessRequest.Requestor)</div>
                                <div><strong>@(accessRequest.SecretName)</strong></div>
                                <small class="text-secondary my-0">@(accessRequest.PermissionsString)</small>
                                <small class="my-0">Requested at: @(accessRequest.RequestedAt)</small>
                            </div>
                            <div class="btn-group px-4 my-2" role="group" aria-label="Item buttons">
                                <button class="btn btn-outline-primary" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.ProcessAccessRequestAsync(accessRequest, true))"><i class="oi oi-circle-check"></i><span>&nbsp; Grant</span></button>
                                <button class="btn btn-outline-danger" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.ProcessAccessRequestAsync(accessRequest, false))"><i class="oi oi-circle-x"></i><span>&nbsp; Reject</span></button>
                            </div>
                        </li>
                    }
                </ul>

                @if (this.IncomingAccessRequests.Count == 0)
                {
                    <p class="my-4">
                        - No incoming access requests -
                    </p>
                }
            </div>
            <div class="tab-pane fade" id="outgoing" role="tabpanel" aria-labelledby="outgoing-tab">
                <ul class="list-group list-group-flush">
                    @foreach (var accessRequest in this.OutgoingAccessRequests)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                            <div>
                                <div>@(accessRequest.Requestor)</div>
                                <div><strong>@(accessRequest.SecretName)</strong></div>
                                <small class="my-0">@(accessRequest.PermissionsString)</small>
                                <small>&nbsp;-&nbsp;</small>
                                <small class="text-secondary my-0">Requested at: @(accessRequest.RequestedAt)</small>
                            </div>
                            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#cancellationDialog" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.SetRequestToCancellation(accessRequest))"><i class="oi oi-circle-x"></i><span>&nbsp; Cancel</span></button>
                        </li>
                    }
                </ul>

                @if (this.OutgoingAccessRequests.Count == 0)
                {
                    <p class="my-4">
                        - No outgoing access requests -
                    </p>
                }

            </div>
        </div>
    </div>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private AuthenticationState authenticationState;

    private NotificationData Notification;

    private IList<AccessRequest> IncomingAccessRequests;

    private IList<AccessRequest> OutgoingAccessRequests;

    private AccessRequest RequestToCancel;

    protected override async Task OnInitializedAsync()
    {
        this.StateContainer.IsInProgress = false;
        this.StateContainer.TakeNotification();
        this.StateContainer.SetCurrentPageHeader($"Access Requests");

        this.authenticationState = await this.AuthenticationStateTask;
        await this.FetchAccessRequestsAsync();
    }

    private async Task FetchAccessRequestsAsync()
    {
        this.StateContainer.IsInProgress = true;
        try
        {
            var currentUserUpn = TokenHandler.GetName(authenticationState.User);
            var reply = await this.StateContainer.TryFetchAccessRequestsAsync(this.apiClient, currentUserUpn);
            if (!"ok".Equals(reply.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = reply.Status,
                    Message = reply.Error
                };
                return;
            }

            this.IncomingAccessRequests = new List<AccessRequest>(this.StateContainer.IncomingAccessRequests);
            this.OutgoingAccessRequests = new List<AccessRequest>(this.StateContainer.OutgoingAccessRequests);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
        }
    }

    private async Task ProcessAccessRequestAsync(AccessRequest accessRequest, bool grant)
    {
        this.StateContainer.IsInProgress = true;
        try
        {
            var reply = await apiClient.ProcessAccessRequestAsync(accessRequest.SecretName, accessRequest.ToUpdateDto(grant));
            if (!"ok".Equals(reply.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = reply.Status,
                    Message = reply.Error
                };

                return;
            }

            this.Notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "success",
                Message = (grant ? "Access granted." : "Request rejected.")
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
        }

        await FetchAccessRequestsAsync();
    }

    private void SetRequestToCancellation(AccessRequest accessRequest)
    {
        this.RequestToCancel = accessRequest;
    }

    private async Task CancelAccessRequestAsync()
    {
        this.StateContainer.IsInProgress = true;
        try
        {
            var reply = await apiClient.CancelAccessRequestAsync(this.RequestToCancel.SecretName, this.RequestToCancel.ToDeletionDto());
            if (!"ok".Equals(reply.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = reply.Status,
                    Message = reply.Error
                };

                return;
            }

            this.RequestToCancel = null;
            this.Notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "success",
                Message = "Request cancelled."
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
        }

        await FetchAccessRequestsAsync();
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
