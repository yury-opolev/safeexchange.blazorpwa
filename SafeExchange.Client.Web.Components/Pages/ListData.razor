@using SafeExchange.Client.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SafeExchange.Client.Common.Model
@using SafeExchange.Client.Web.Components.Model

@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject ApiClient apiClient

@if (this.Notification != null)
{
    <div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <strong>@(this.Notification.Status ?? string.Empty)</strong> @(this.Notification.Message ?? string.Empty)
        <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
    </div>
}

@if (this.SecretsPermissions != null)
{
    <ul class="list-group list-group-flush">
        @for (int i = 0; i < this.SecretsPermissions.Count; i++)
        {
            var secretPermissions = this.SecretsPermissions[i];
            var objectUri = this.GetViewUri(secretPermissions.ObjectName);
            <li class="list-group-item list-item-hover-border d-flex justify-content-between align-items-center flex-wrap">
                <div>
                    <CopyableContent Data="@objectUri">
                        <span>@secretPermissions.ObjectName</span>
                    </CopyableContent>
                    <small class="my-0">@secretPermissions.PermissionsString</small>
                </div>
                <div class="btn-group px-4 my-2" role="group" aria-label="Item buttons">
                    <button class="btn btn-outline-primary" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.ViewObject(secretPermissions.ObjectName))">
                        <i class="bi bi-eye"></i>
                        <span>&nbsp;View</span>
                    </button>
                    <button class="btn btn-outline-primary" type="button" disabled="@(!secretPermissions.CanWrite || this.StateContainer.IsInProgress)" @onclick="@(e => this.EditObject(secretPermissions.ObjectName))">
                        <i class="bi bi-pencil"></i>
                        <span>&nbsp; Edit</span>
                    </button>
                </div>
            </li>
        }
    </ul>

    @if (this.SecretsPermissions.Count == 0)
    {
        <p>
            - No secrets found -
        </p>
    }
}

@code {

    private NotificationData Notification;

    private List<SubjectPermissions> SecretsPermissions;

    protected override async Task OnInitializedAsync()
    {
        this.StateContainer.IsInProgress = false;
        this.StateContainer.TakeNotification();

        this.StateContainer.SetCurrentPageHeader($"My secrets");
        await this.FetchSecretNamesAsync();
    }

    private string GetViewUri(string objectName)
    {
        return $"{NavigationManager.BaseUri.TrimEnd('/')}/viewdata/{objectName}";
    }

    private void ViewObject(string objectName)
    {
        if (string.IsNullOrEmpty(objectName))
        {
            return;
        }

        NavigationManager.NavigateTo($"viewdata/{objectName}");
    }

    private void EditObject(string objectName)
    {
        if (string.IsNullOrEmpty(objectName))
        {
            return;
        }

        NavigationManager.NavigateTo($"editdata/{objectName}");
    }

    private async Task FetchSecretNamesAsync()
    {
        this.StateContainer.IsInProgress = true;
        try
        {
            var secretPermissionsOutput = await apiClient.ListSecretMetadataAsync();

            if (!"ok".Equals(secretPermissionsOutput.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = secretPermissionsOutput.Status,
                    Message = secretPermissionsOutput.Error
                };

                return;
            }

            this.SecretsPermissions = new List<SubjectPermissions>(secretPermissionsOutput.Result.Count);
            foreach (var secretPermissionsOutputItem in secretPermissionsOutput.Result)
            {
                this.SecretsPermissions.Add(new SubjectPermissions(secretPermissionsOutputItem));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
