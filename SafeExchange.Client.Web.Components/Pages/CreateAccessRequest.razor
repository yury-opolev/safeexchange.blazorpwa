@using SafeExchange.Client.Common
@using SafeExchange.Client.Common.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SafeExchange.Client.Web.Components.Model

@inject StateContainer StateContainer
@inject ApiClient apiClient
@inject NavigationManager NavManager

@if (this.Notification != null)
{
    <div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <strong>@(this.Notification.Status ?? string.Empty)</strong> @(this.Notification.Message ?? string.Empty)
        <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
    </div>
}

<div class="card mb-3">
    <div class="card-header"><strong>New Access Request:</strong></div>
    <div class="card-body">

        <EditForm Model="@this.AccessRequest" OnValidSubmit="@RequestAccessAsync">
            <DataAnnotationsValidator />
            <p>
                <InputText class="form-control col" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.AccessRequest.SecretName" placeholder="Secret Id" />
                <ValidationMessage For="@(() => this.AccessRequest.SecretName)" />
            </p>
            <p>
                <label>
                    Permissions:
                    <InputSelect class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.AccessRequest.PermissionsString" >
                        <option value="Read">Read</option>
                        <option value="Read,Write">Read,Write</option>
                        <option value="Read,Write,GrantAccess">Read,Write,GrantAccess</option>
                        <option value="Read,Write,GrantAccess,RevokeAccess">Read,Write,GrantAccess,RevokeAccess</option>
                    </InputSelect>
                </label>
            </p>
            <p>
                <button class="btn btn-outline-primary" type="submit" disabled="@this.StateContainer.IsInProgress"><span class="oi oi-cloud-upload"></span>&nbsp; Request Access</button>
            </p>
        </EditForm>
    </div>
</div>

@code {

    private NotificationData Notification;

    private AccessRequest AccessRequest { get; set; } = new AccessRequest() { CanRead = true };

    protected override void OnInitialized()
    {
        this.StateContainer.IsInProgress = false;
        this.StateContainer.TakeNotification();
        this.StateContainer.SetCurrentPageHeader($"Create Access Request");

        if (NavManager.TryGetQueryString("subject", out string subjectValue))
        {
            this.AccessRequest.SecretName = subjectValue;
        }

        if (NavManager.TryGetQueryString("permission", out string permissionValue))
        {
            if (PermissionsConverter.TryParsePermissionString(permissionValue, out _, out _, out _, out _))
            {
                this.AccessRequest.PermissionsString = permissionValue;
            }
            else
            {
                this.AccessRequest.PermissionsString = "Read";
            }
        }
    }

    private async Task RequestAccessAsync()
    {
        this.StateContainer.IsInProgress = true;
        try
        {
            var reply = await apiClient.CreateAccessRequestAsync(this.AccessRequest.SecretName, this.AccessRequest.ToCreationDto());

            if (!"ok".Equals(reply.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = reply.Status,
                    Message = reply.Error
                };
                return;
            }

            this.AccessRequest.SecretName = string.Empty;
            this.AccessRequest.CanRead = true;
            this.AccessRequest.CanWrite = false;
            this.AccessRequest.CanGrantAccess = false;
            this.AccessRequest.CanRevokeAccess = false;

            this.Notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "success",
                Message = "Access request created."
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
