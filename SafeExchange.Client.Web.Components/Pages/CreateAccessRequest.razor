@using SafeExchange.Client.Web.Components.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject StateContainer StateContainer
@inject ApiClient apiClient
@inject NavigationManager NavManager

@if (this.IsInProgress)
{
    <p>
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
        </div>
    </p>
}

@if (this.Notification != null)
{
    <div class="alert @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <strong>@(this.Notification.Status ?? string.Empty)</strong> @(this.Notification.Message ?? string.Empty)
        <button type="button" class="close" @onclick="DismissNotification">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<div class="card bg-light mb-3">
    <div class="card-header"><strong>New Access Request:</strong></div>
    <div class="card-body">

        <EditForm Model="@this.AccessRequestInput" OnValidSubmit="@RequestAccessAsync">
            <DataAnnotationsValidator />
            <p>
                <InputText class="form-control col" disabled="@IsInProgress" @bind-Value="this.AccessRequestInput.SecretId" placeholder="Secret Id" />
                <ValidationMessage For="@(() => this.AccessRequestInput.SecretId)" />
            </p>
            <p>
                <label>
                    Permissions:
                    <InputSelect class="form-control" disabled="@IsInProgress" @bind-Value="this.AccessRequestInput.Permission">
                        <option>Read</option>
                        <option>Read,Write</option>
                        <option>Read,Write,GrantAccess</option>
                        <option>Read,Write,GrantAccess,RevokeAccess</option>
                    </InputSelect>
                </label>
            </p>
            <p>
                <button class="btn btn-outline-primary" type="submit" disabled="@IsInProgress"><span class="oi oi-cloud-upload"></span>&nbsp; Request Access</button>
            </p>
        </EditForm>
    </div>
</div>

@code {

    private NotificationData Notification;

    private bool IsInProgress;

    private AccessRequestDataInput AccessRequestInput { get; set; } = new AccessRequestDataInput() { Permission = "Read" };

    protected override void OnInitialized()
    {
        this.StateContainer.TakeNotification();
        this.StateContainer.SetCurrentPageHeader($"Create Access Request");

        if (NavManager.TryGetQueryString("subject", out string subjectValue))
        {
            this.AccessRequestInput.SecretId = subjectValue;
        }
        if (NavManager.TryGetQueryString("permission", out string permissionValue))
        {
            this.AccessRequestInput.Permission = permissionValue;
        }
    }

    private async Task RequestAccessAsync()
    {
        this.IsInProgress = true;
        try
        {
            var reply = await apiClient.CreateAccessRequestAsync(this.AccessRequestInput);

            if (!"ok".Equals(reply.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = reply.Status,
                    Message = reply.Error
                };
                return;
            }

            this.AccessRequestInput.SecretId = string.Empty;
            this.AccessRequestInput.Permission = string.Empty;

            this.Notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "success",
                Message = "Access request created."
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
