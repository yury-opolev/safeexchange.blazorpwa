@using SafeExchange.Client.Web.Components.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager NavManager
@inject ApiClient apiClient
@inject StateContainer StateContainer

@if (this.IsInProgress)
{
    <p>
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
        </div>
    </p>
}

@if (this.Notification != null)
{
    <div class="alert @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <strong>@(this.Notification.Status ?? string.Empty)</strong> @(this.Notification.Message ?? string.Empty)
        <button type="button" class="close" @onclick="DismissNotification">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<EditForm Model="@inputModel" OnValidSubmit="@CreateSecretAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <InputText class="form-control col" disabled="@IsInProgress" @bind-Value="inputModel.Name" placeholder="Name" />
    </p>
    <p>
        <InputTextArea class="form-control col" rows="10" disabled="@IsInProgress" @bind-Value="inputModel.Data.Value" placeholder="Content" />
    </p>

    <p>
        <div class="form-check">
            <label class="form-check-label">
                <InputCheckbox class="form-check-input" disabled="@IsInProgress" @bind-Value="inputModel.Data.DestroySettings.DestroyAfterRead" />Destroy After Read
            </label>
        </div>
    </p>
    <p>
        <div class="form-check">
            <label class="form-check-label">
                <InputCheckbox class="form-check-input" disabled="@IsInProgress" @bind-Value="inputModel.Data.DestroySettings.ScheduleDestroy" />Schedule Destroy
            </label>
        </div>
    </p>
    <p>
        <div class="form-group form-row">
            <label for="destroy-datetime-input" class="col-2 col-form-label">Destroy At:</label>
            <div class="col-10">
                <InputDateTime id="destroy-datetime-input" class="form-control" type="datetime-local" disabled="@IsInProgress" @bind-Value="inputModel.Data.DestroySettings.DestroyAt" DisplayName="DestroyAt" />
            </div>
        </div>
    </p>

    <p class="h4">
        Grant access to:
    </p>

    @for (int i = 0; i < inputModel.AccessList.Count; i++)
    {
        var tempIndex = i;
        <p>
            <div class="row">
                <div class="col">
                    <InputText class="form-control" disabled="@IsInProgress" @bind-Value="inputModel.AccessList[tempIndex].Subject" placeholder="Username" />
                </div>
                <div class="col">
                    <InputSelect class="form-control" disabled="@IsInProgress" @bind-Value="inputModel.AccessList[tempIndex].Permission">
                        <option>Read</option>
                        <option>Read,Write</option>
                        <option>Read,Write,GrantAccess</option>
                        <option>Read,Write,GrantAccess,RevokeAccess</option>
                    </InputSelect>
                </div>
                <div class="col-3">
                    <button class="btn btn-outline-danger" type="button" disabled="@IsInProgress" @onclick="@(e => this.RemovePermissionItem(tempIndex))"><span class="oi oi-x"></span></button>
                </div>
            </div>
        </p>
    }
    <p>
        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary" type="button" disabled="@IsInProgress" @onclick="AddPermissionItem"><span class="oi oi-plus"></span>&nbsp; Add user</button>
            </div>
        </div>
    </p>

    <p>
        <div class="row justify-content-center">
            <button class="btn btn-primary" type="submit" disabled="@IsInProgress">Create</button>
        </div>
    </p>
</EditForm>

@code {

    private NotificationData Notification;

    private bool IsInProgress = false;

    private SecretInput inputModel = new SecretInput()
    {
        Data = new SecretDataInput()
        {
            DestroySettings = new DestroySettings()
            {
                DestroyAfterRead = false,
                ScheduleDestroy = true,
                DestroyAt = DateTime.Now.AddDays(7)
            }
        },
        AccessList = new List<AccessDataInput>() { new AccessDataInput() { Permission = "Read" } }
    };

    protected override void OnInitialized()
    {
        this.StateContainer.SetCurrentPageHeader($"Add secret");
        this.StateContainer.TakeNotification();
    }

    private void AddPermissionItem()
    {
        this.inputModel.AccessList.Add(new AccessDataInput() { Permission = "Read" });
    }

    private void RemovePermissionItem(int index)
    {
        this.inputModel.AccessList.RemoveAt(index);
    }

    private async Task CreateSecretAsync()
    {
        this.IsInProgress = true;

        var inputData = new SecretDataInput()
        {
            Value = this.inputModel.Data.Value,
            ContentType = this.inputModel.Data.ContentType,
            DestroySettings = this.inputModel.Data.DestroySettings
        };

        try
        {
            var secretData = await apiClient.CreateSecretDataAsync(this.inputModel.Name, inputData);

            if (!"ok".Equals(secretData.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = secretData.Status,
                    Message = secretData.Error
                };
                return;
            }

            foreach (var accessItem in this.inputModel.AccessList)
            {
                var accessReply = await apiClient.GrantAccessAsync(this.inputModel.Name, accessItem);
                if (!"ok".Equals(accessReply.Status))
                {
                    // TODO ...
                }
            }

            var notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "Success",
                Message = $"Secret '{this.inputModel.Name}' created successfully"
            };
            this.StateContainer.SetNextNotification(notification);
            NavManager.NavigateTo($"/");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
