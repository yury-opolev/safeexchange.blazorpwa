@using SafeExchange.Client.Common
@using SafeExchange.Client.Common.Model
@using SafeExchange.Client.Web.Components.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.RegularExpressions;
@using System.Text
@using System.IO
@using System.Threading

@implements IDisposable

@inject NavigationManager NavManager
@inject ApiClient apiClient
@inject StateContainer StateContainer
@inject TooltipsInitializer TooltipsInitializerInstance
@inject DownloadUploadHelper downloadUploadHelper

@if (this.Notification != null)
{
    <div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <strong>@(this.Notification.Status ?? string.Empty)</strong> @(this.Notification.Message ?? string.Empty)
        <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
    </div>
}

<EditForm EditContext="@editContext" OnSubmit="@OnSubmitAsync">
    <CompoundModelValidator />

    <p>
        <InputText class="form-control col" disabled="@this.StateContainer.IsInProgress" @bind-Value="@this.compoundModel.Metadata.ObjectName" placeholder="Name" aria-label="Name" aria-describedby="name-validation" />
        <ValidationMessage id="name-validation" For="@(() => this.compoundModel.Metadata.ObjectName)" />
    </p>
    <p>
        <div class="@(this.editContext.FieldCssClass(() => this.compoundModel.MainData))">
            <div id="quill-toolbar">
              <select class="ql-font">
                <option selected></option>
                <option value="serif"></option>
                <option value="monospace"></option>
              </select>
              <select class="ql-size">
                <option value="small"></option>
                <option selected></option>
                <option value="large"></option>
                <option value="huge"></option>
              </select>
              <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
              </span>
              <span class="ql-formats">
                <select class="ql-align"></select>
              </span>
              <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
              </span>
              <span class="ql-formats">
                <button class="ql-link"></button>
                <button class="ql-image"></button>
              </span>
              <span class="ql-formats">
                <button type="button" class="ql-password"><i class="oi oi-lock-locked toolbar-password-img"></i></button>
              </span>
              <span class="ql-formats">
                <button class="ql-clean"></button>
              </span>
            </div>
            <QuillEditor @ref="this.quillEditor" aria-label="Content" aria-describedby="content-validation" @bind-Value="@this.compoundModel.MainData" Placeholder="Content" OnBlur="@this.HandleEditorLostFocus" OnCopyableElementInserted="@this.HandleCopyableElementInserted" NextElementRef="@this.attachmentsButtonElement" ></QuillEditor>
        </div>
        <ValidationMessage id="name-validation" For="@(() => this.compoundModel.MainData)" />
    </p>

    <p>
    <div class="collapsible-content">
        <button @ref="this.attachmentsButtonElement" class="btn mb-2 d-inline-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAttachments" aria-expanded="false" aria-controls="collapseAttachments">
            &nbsp; Attachments
        </button>
        <div class="collapse" id="collapseAttachments">
            <div class="card card-body">

                @if ((this.Attachments?.Count ?? 0) > 0)
                {
                    <ul class="list-group list-group-flush">
                        @for (int i = 0; i < this.Attachments.Count; i++)
                        {
                            var attachmentIndex = i;
                            var attachment = this.Attachments[i];
                            <li class="attachment-row list-group-item d-flex justify-content-start align-items-center flex-wrap">
                                <div class="px-2">
                                    @switch (attachment.Status)
                                    {
                                        case (UploadStatus.NotStarted):
                                            <i class="oi oi-file text-secondary"></i>
                                            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                            break;

                                        case (UploadStatus.InProgress):
                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                            <span>@($"{attachment.ProgressPercents:00}")%&nbsp;</span>
                                            break;

                                        case (UploadStatus.Success):
                                            <i class="oi oi-check text-success"></i>
                                            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                            break;

                                        case (UploadStatus.Error):
                                            <i class="oi oi-warning text-warning"></i>
                                            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                            break;
                                    }
                                </div>
                                <div>
                                    <span id="@($"attachment-{i}")">@attachment.SourceFile.Name</span>
                                    <small class="text-secondary my-0">&nbsp;&nbsp; Size: @(ContentMetadata.BytesToString(attachment.SourceFile.Size))</small>
                                </div>
                                <div class="btn-group px-4 attachment-row-last" role="group" aria-label="Attachment button">
                                    <button id="@($"remove-attachment-{i}")" class="btn btn-outline-danger" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.Attachments.Remove(attachment))" aria-label="Remove attachment" aria-labelledby="@($"remove-attachment-{i} attachment-{i}")"><i class="oi oi-x"></i></button>
                                </div>
                            </li>
                        }
                    </ul>                        
                }

                <div class="mt-3" >
                    <button id="attachButton" class="btn btn-outline-primary" type="button" disabled="@(this.StateContainer.IsInProgress)" @onclick="@(async () => await this.ClickFileInputAsync())">Attach file(s)</button>
                    <InputFile id="attachedFileList1" @ref="this.inputFile" style="display:none" OnChange="@this.AddFiles" multiple disabled="@(this.StateContainer.IsInProgress)" />
                </div>
            </div>
        </div>
    </div>
    </p>

    <p>
    <div class="row align-items-center">
        <div class="col-sm-4">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" type="checkbox" id="scheduleDestroySwitch" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.compoundModel.Metadata.ExpirationMetadata.ScheduleExpiration" />
                <label class="form-check-label" for="scheduleDestroySwitch">Schedule Expiration</label>
            </div>
        </div>
        <div class="col-sm">
            <label for="destroy-datetime-input" class="visually-hidden">Expire At:</label>
            <div class="input-group">
                <div class="input-group-text">Expire At</div>
                <InputDate id="destroy-datetime-input" class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.compoundModel.Metadata.ExpirationMetadata.ExpireAt" Type=InputDateType.DateTimeLocal DisplayName="ExpireAt" />
            </div>
        </div>
    </div>
    </p>

    <p>
    <div class="row align-items-center">
        <div class="col-sm-4">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" type="checkbox" id="destroyOnIdleSwitch" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.compoundModel.Metadata.ExpirationMetadata.ExpireOnIdleTime" />
                <label class="form-check-label" for="destroyOnIdleSwitch">Expire after idle time</label>
            </div>
        </div>
        <div class="col-sm">
            <label for="idle-days-input" class="visually-hidden">Idle days:</label>
            <div class="input-group">
                <div class="input-group-text">Idle Days</div>
                <InputNumber id="idle-days-input" class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.compoundModel.Metadata.ExpirationMetadata.DaysToExpire" DisplayName="DaysToExpire" />
            </div>
            <ValidationMessage id="idle-days-validation" For="@(() => this.compoundModel.Metadata.ExpirationMetadata.DaysToExpire)" />
        </div>
        <div class="col-sm">
            <label for="idle-timespan-input" class="visually-hidden">Idle time:</label>
            <div class="input-group">
                <div class="input-group-text">Idle Time</div>
                <InputDate id="idle-timespan-input" class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="this.compoundModel.Metadata.ExpirationMetadata.TimeToExpire" Type=InputDateType.Time DisplayName="TimeToExpire" />
            </div>
        </div>
    </div>
    </p>

    <p>
        <strong>Grant access to:</strong>
    </p>

    @for (int i = 0; i < compoundModel.Permissions.Count; i++)
    {
        var tempIndex = i;
        <p>
            <div class="row align-items-center">
                <div class="col-2">
                    <div class="form-floating">
                        <InputSelect id="@($"usertype-input-{i}")" class="form-control" disabled="@this.StateContainer.IsInProgress"
                            ValueExpression="@(() => compoundModel.Permissions[tempIndex].SubjectType)"
                            Value="@compoundModel.Permissions[tempIndex].SubjectType"
                            ValueChanged="@((SubjectType value) => OnPermissionTypeChanged(compoundModel.Permissions[tempIndex], value))"
                            placeholder="Type" aria-describedby="@($"ut-validation-{i}")">
                            @foreach (var value in Enum.GetValues(typeof(SubjectType)))
                            {
                                <option>@value</option>
                            }
                        </InputSelect>
                        <label for="@($"usertype-input-{i}")" class="form-label">Type</label>
                    </div>
                    <ValidationMessage id="@($"ut-validation-{i}")" For="@(() => compoundModel.Permissions[tempIndex].SubjectType)" />
                </div>
                @switch (compoundModel.Permissions[tempIndex].SubjectType)
                {
                    case (SubjectType.User):
                        <div class="col">
                            <div class="form-floating">
                                <InputText id="@($"username-input-{i}")" class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="compoundModel.Permissions[tempIndex].SubjectName" placeholder="Username" aria-describedby="@($"un-validation-{i}")" />
                                <label for="@($"username-input-{i}")" class="form-label">Username</label>
                            </div>
                            <ValidationMessage id="@($"un-validation-{i}")" For="@(() => compoundModel.Permissions[tempIndex].SubjectName)" />
                        </div>
                        break;

                    case (SubjectType.Application):
                        <div class="col">
                            <div class="form-floating">
                                <InputSelect id="@($"application-input-{i}")" class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="compoundModel.Permissions[tempIndex].SubjectName" placeholder="Application" aria-describedby="@($"app-validation-{i}")">
                                    <option>A</option>
                                    <option>B</option>
                                </InputSelect>
                                <label for="@($"application-input-{i}")" class="form-label">Application</label>
                            </div>
                            <ValidationMessage id="@($"app-validation-{i}")" For="@(() => compoundModel.Permissions[tempIndex].SubjectName)" />
                        </div>
                        break;
                }
                <div class="col">
                    <div class="form-floating">
                        <InputSelect id="@($"permissions-select-{i}")" class="form-control" disabled="@this.StateContainer.IsInProgress" @bind-Value="compoundModel.Permissions[tempIndex].PermissionsString" aria-labelledby="@($"permissions-select-{i} username-input-{i}")">
                            <option>Read</option>
                            <option>Read,Write</option>
                            <option>Read,Write,GrantAccess</option>
                            <option>Read,Write,GrantAccess,RevokeAccess</option>
                        </InputSelect>
                        <label for="@($"permissions-select-{i}")" class="form-label">Permissions</label>
                    </div>
                </div>
                <div class="col-2">
                    <button id="@($"revoke-button-{i}")" class="btn btn-outline-danger" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.RemovePermissionItem(tempIndex))" aria-label="Revoke access" aria-labelledby="@($"revoke-button-{i} username-input-{i}")"><span class="oi oi-x"></span></button>
                </div>
            </div>
        </p>
    }
    <p>
        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="AddPermissionItem"><span class="oi oi-plus"></span>&nbsp; Add user</button>
            </div>
        </div>
    </p>

    <p>
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary" type="submit" disabled="@(this.StateContainer.IsInProgress)">
                @if (this.StateContainer.IsInProgress)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span>Creating...</span>
                }
                else
                {
                    <span>Create</span>
                }
            </button>
        </div>
    </p>
</EditForm>

@code {
    public const int MaxAttachments = 5;

    private NotificationData Notification;

    private EditContext editContext;

    private QuillEditor quillEditor;

    private InputFile inputFile;

    private ElementReference attachmentsButtonElement;

    private bool initializeTooltips = false;

    private CompoundModel compoundModel = new CompoundModel()
    {
        Metadata = new ObjectMetadata()
        {
            ObjectName = string.Empty,
            Content = new List<ContentMetadata>(),
            ExpirationMetadata = new ExpirationMetadata()
            {
                ScheduleExpiration = false,
                ExpireAt = DateTime.MinValue,
                ExpireOnIdleTime = false,
                IdleTimeToExpire = TimeSpan.Zero
            }
        },
        Permissions = new List<SubjectPermissions>()
        {
            new SubjectPermissions()
            {
                ObjectName = string.Empty,
                SubjectName = string.Empty,

                CanRead = true,
                CanWrite = false,
                CanGrantAccess = false,
                CanRevokeAccess = false
            }
        },
        MainData = string.Empty
    };

    private List<AttachmentModel> Attachments { get; set; } = new();

    public void Dispose()
    {
        //...
    }

    protected override async Task OnInitializedAsync()
    {
        this.StateContainer.IsInProgress = false;
        this.StateContainer.SetCurrentPageHeader($"Add secret");
        this.StateContainer.TakeNotification();

        this.editContext = new EditContext(this.compoundModel);
        await this.StateContainer.TryFetchRegisteredApplications(this.apiClient);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!this.initializeTooltips)
        {
            return;
        }

        try
        {
            await TooltipsInitializerInstance.InitializeQuillClipboardTooltipsAsync(this.quillEditor.EditorRef, "Copy to clipboard", "Copied");
        }
        finally
        {
            this.initializeTooltips = false;
        }
    }

    private void OnPermissionTypeChanged(SubjectPermissions permissions, SubjectType value)
    {
        permissions.SubjectType = value;
        permissions.SubjectName = string.Empty;
    }

    private async Task ClickFileInputAsync()
    {
        await this.downloadUploadHelper.InvokeAttachFileAsync(this.inputFile);
    }

    private void AddFiles(InputFileChangeEventArgs e)
    {
        this.Attachments.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                var fileModel = new InputBrowserFileModel(file);
                this.Attachments.Add(new (fileModel));
                if (this.Attachments.Count >= MaxAttachments)
                {
                    break;
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine($"{exception.GetType()}: {exception.Message}");
            }
        }
    }

    private async Task HandleEditorLostFocus()
    {
        if (!this.quillEditor.IsDirty)
        {
            return;
        }

        await this.quillEditor.RefreshContentAsync();
        this.compoundModel.MainData = this.quillEditor.Value;
        this.ValidateContent();
    }

    private void HandleCopyableElementInserted()
    {
        this.initializeTooltips = true;
    }

    private void ValidateContent()
    {
        var fieldIdentifier = this.editContext.Field("MainData");
        this.editContext.NotifyFieldChanged(fieldIdentifier);
    }

    private void AddPermissionItem()
    {
        this.compoundModel.Permissions.Add(new SubjectPermissions()
        {
            ObjectName = string.Empty,
            SubjectName = string.Empty,

            CanRead = true,
            CanWrite = false,
            CanGrantAccess = false,
            CanRevokeAccess = false,
        });
    }

    private void RemovePermissionItem(int index)
    {
        this.compoundModel.Permissions.RemoveAt(index);
    }

    private async Task OnSubmitAsync(EditContext editContext)
    {
        if (this.quillEditor.IsDirty)
        {
            await this.quillEditor.RefreshContentAsync();
            this.compoundModel.MainData = this.quillEditor.Value;
        }

        if (!editContext.Validate())
        {
            return;
        }

        await TryCreateSecretAsync();
    }

    private async Task TryCreateSecretAsync()
    {
        this.StateContainer.IsInProgress = true;
        await this.quillEditor?.SetEnabledAsync(false);
        this.StateHasChanged();

        try
        {
            await using var timer = new Timer(_ => InvokeAsync(() => StateHasChanged()), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
            var result = await apiClient.CreateFromCompoundModelAsync(this.compoundModel, this.Attachments);
            if (!"ok".Equals(result.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = result.Status,
                    Message = result.Error
                };

                return;
            }

            var notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "Success",
                Message = $"Secret '{this.compoundModel.Metadata.ObjectName}' created successfully",
                CopyableUri = this.GetViewUri(this.compoundModel.Metadata.ObjectName)
            };

            this.StateContainer.SetNextNotification(notification);
            NavManager.NavigateTo($"/");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
            await this.quillEditor?.SetEnabledAsync(true);
            this.StateHasChanged();
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }

    private string GetViewUri(string objectName)
    {
        return $"{NavManager.BaseUri.TrimEnd('/')}/viewdata/{objectName}";
    }
}
