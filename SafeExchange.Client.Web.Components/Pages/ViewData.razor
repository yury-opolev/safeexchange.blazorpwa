@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using SafeExchange.Client.Common
@using SafeExchange.Client.Common.Model
@using SafeExchange.Client.Web.Components.Model
@using SafeExchange.Client.Web.Components.Helpers
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@using System.IO

@inject NavigationManager NavManager
@inject ApiClient apiClient
@inject StateContainer StateContainer
@inject TooltipsInitializer TooltipsInitializerInstance
@inject DownloadUploadHelper downloadUploadHelper

@if (this.Notification != null)
{
<div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
    <p>
        <strong>@(this.Notification.Status ?? string.Empty)</strong>&nbsp; @(this.Notification.Message ?? string.Empty)
    </p>
    @if (!string.IsNullOrEmpty(this.Notification.ButtonText))
    {
        <hr>
        <p>
            <button class="btn btn-warning" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="() => this.NavManager.NavigateTo(this.Notification.ButtonUri)">
                <span>@this.Notification.ButtonText</span>
            </button>
        </p>
    }
    <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
</div>
}

@if (this.compoundModel != null)
{
    <EditForm Model="@this.compoundModel">
    <p>
        <div class="ql-container ql-snow">
            <div @ref="this.quillElement" id="main_content" class="ql-editor @(this.StateContainer.IsInProgress ? "ql-blank" : string.Empty)" data-placeholder="Loading...">
            @if (!this.StateContainer.IsInProgress)
            {
                @((MarkupString)this.compoundModel.MainData)
            }
            </div>
        </div>
    </p>

    @if (this.Attachments.Count > 0)
    {
        <p>
        <div class="collapsible-content">
            <button class="btn mb-2 d-inline-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAttachments" aria-expanded="false" aria-controls="collapseAttachments">
                &nbsp; Attachments
            </button>
            <div class="collapse" id="collapseAttachments">
                <div class="card card-body">

                    <ul class="list-group list-group-flush">
                        @for (int ai = 0; ai < this.Attachments.Count; ai++)
                        {
                            var attachment = this.Attachments[ai];
                            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                <div>
                                    <span id="@($"attachment-{ai}")">@attachment.FileName</span>
                                    <small class="text-secondary my-0">&nbsp;&nbsp; Size: @attachment.GetLengthDescription()</small>
                                </div>
                                <div>
                                    <button class="btn btn-outline-primary" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="@(e => this.DownloadAttachmentAsync(attachment))">
                                        @if (attachment.Equals(this.ContentToDownload))
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                            <span>&nbsp;Download</span>
                                        }
                                        else
                                        {
                                            <i class="oi oi-cloud-download"></i><span>&nbsp;Download</span>
                                        }
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        </p>
    }

    <div class="collapsible-content">
        <button class="btn mb-2 d-inline-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAccessList" aria-expanded="false" aria-controls="collapseAccessList">
            &nbsp; Access List
        </button>
        <div class="collapse" id="collapseAccessList">
            <div class="card card-body">

                @{ int i = 0; }
                @foreach (var permissionsItem in this.compoundModel.Permissions)
                {
                    <div>
                        <div class="row">
                            <div class="col">
                                <InputText id="@($"username-{i}")" class="form-control-plaintext" @bind-Value="@permissionsItem.SubjectName" readonly />
                            </div>
                            <div class="col">
                                <InputText id="@($"permissions-{i}")" class="form-control-plaintext" @bind-Value="@permissionsItem.PermissionsString" readonly aria-label="Permissions" aria-labelledby="@($"permissions-{i} username-{i}")" />
                            </div>
                        </div>
                    </div>
                    i += 1;
                }

                @if (this.compoundModel.Permissions.Count == 0)
                {
                    <div>
                        - No access was granted to users -
                    </div>
                }

            </div>
        </div>
    </div>

    <p>
        <div class="d-flex mt-3 justify-content-center">
            <div class="btn-group" role="group" aria-label="Item buttons">
                <button class="btn btn-outline-primary" type="button" disabled="@this.StateContainer.IsInProgress" @onclick="FetchData">
                    @if (this.StateContainer.IsInProgress)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                    }
                    else
                    {
                        <i class="oi oi-reload"></i>
                    }
                    <span>&nbsp;Refresh</span>
                </button>
                <button class="btn btn-outline-primary" type="button" disabled="@(!this.CanEditObject() || this.StateContainer.IsInProgress)" @onclick="EditObject">
                    <i class="oi oi-pencil"></i><span>&nbsp;Edit</span>
                </button>
            </div>
        </div>
    </p>
    </EditForm>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string ObjectName { get; set; }

    private AuthenticationState authenticationState;

    private NotificationData Notification;

    private ElementReference quillElement;

    private bool initializeTooltips = false;

    private CompoundModel compoundModel = new CompoundModel()
    {
        Metadata = new ObjectMetadata()
        {
            ObjectName = string.Empty,
            Content = new List<ContentMetadata>(),
            ExpirationMetadata = new ExpirationMetadata()
            {
                ScheduleExpiration = false,
                ExpireAt = DateTime.MinValue,
                ExpireOnIdleTime = false,
                IdleTimeToExpire = TimeSpan.Zero
            }
        },
        Permissions = new List<SubjectPermissions>()
        {
            new SubjectPermissions()
            {
                ObjectName = string.Empty,
                SubjectName = string.Empty,

                CanRead = true,
                CanWrite = false,
                CanGrantAccess = false,
                CanRevokeAccess = false
            }
        },
        MainData = string.Empty
    };

    private List<ContentMetadata> Attachments { get; set; } = new();

    private ContentMetadata? ContentToDownload = null;

    protected override async Task OnInitializedAsync()
    {
        this.StateContainer.IsInProgress = false;
        this.StateContainer.TakeNotification();

        this.ObjectName = this.ObjectName ?? string.Empty;
        this.StateContainer.SetCurrentPageHeader($"View '{this.ObjectName}'");

        this.authenticationState = await this.AuthenticationStateTask;
        await this.FetchData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!this.initializeTooltips)
        {
            return;
        }

        try
        {
            await TooltipsInitializerInstance.InitializeQuillClipboardTooltipsAsync(this.quillElement, "Copy to clipboard", "Copied");
        }
        finally
        {
            this.initializeTooltips = false;
        }
    }

    private async Task FetchData()
    {
        await this.FetchSecretAsync(this.ObjectName);
    }

    private bool CanEditObject()
    {
        var currentUserUpn = TokenHandler.GetName(authenticationState.User);
        if (string.IsNullOrEmpty(currentUserUpn) || !currentUserUpn.Contains("@"))
        {
            return true;
        }

        var accessList = this.compoundModel?.Permissions;
        if (accessList == null)
        {
            return false;
        }

        foreach (var accessItem in accessList)
        {
            if (accessItem.SubjectName.Equals(currentUserUpn) && (accessItem.CanWrite || accessItem.CanGrantAccess))
            {
                return true;
            }
        }

        return false;
    }

    private void EditObject()
    {
        NavManager.NavigateTo($"editdata/{this.ObjectName}");
    }

    private async Task FetchSecretAsync(string objectName)
    {
        this.StateContainer.IsInProgress = true;
        try
        {
            var compoundModelResult = await this.apiClient.GetCompoundModelAsync(objectName);
            if (!"ok".Equals(compoundModelResult.Status))
            {
                var messageAppendix = string.Empty;
                if ("consent_required".Equals(compoundModelResult.SubStatus))
                {
                    messageAppendix = "; User must give consent in AAD to fetch groups in order to use groups authorization.";
                }

                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = compoundModelResult.Status,
                    Message = $"{compoundModelResult.Error}{messageAppendix}",
                    ButtonText = "unauthorized".Equals(compoundModelResult.Status) ? "Request Access" : string.Empty,
                    ButtonUri = this.CreateAccessRequestUri("Read")
                };

                return;
            }

            this.DismissNotification();

            this.Attachments = new(compoundModelResult.Result.Metadata.Content.Where(c => !c.IsMain));

            this.compoundModel.Metadata = compoundModelResult.Result.Metadata;
            this.compoundModel.Permissions = compoundModelResult.Result.Permissions;
            this.compoundModel.MainData = compoundModelResult.Result.MainData;

            this.initializeTooltips = true;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.StateContainer.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }

    private string CreateAccessRequestUri(string permissions)
    {
        return $"addrequest?subject={this.ObjectName}&permission={permissions}";
    }

    private async Task DownloadAttachmentAsync(ContentMetadata attachment)
    {
        this.ContentToDownload = attachment;
        try
        {
            if (await this.downloadUploadHelper.SupportsFileSystemAccessAsync())
            {
                await DownloadToFileStreamAsync(attachment);
                return;
            }

            await DownloadAsBlobUrlAsync(attachment);
        }
        finally
        {
            this.ContentToDownload = null;
        }
    }

    private async Task DownloadToFileStreamAsync(ContentMetadata attachment)
    {
        Console.WriteLine($"Started {nameof(DownloadToFileStreamAsync)}.");

        IJSObjectReference? writableStream = default;
        try
        {
            writableStream = await this.downloadUploadHelper.StartFileDownloadAsync(attachment.FileName);
            foreach (var chunk in attachment.Chunks)
            {
                var chunkStreamResponse = await this.apiClient.GetSecretDataStreamAsync(this.compoundModel.Metadata.ObjectName, attachment.ContentName, chunk.ChunkName);
                if (!"ok".Equals(chunkStreamResponse.Status))
                {
                    this.Notification = new NotificationData()
                        {
                            Type = NotificationType.Warning,
                            Status = chunkStreamResponse.Status,
                            Message = $"Cannot download attachment: {(chunkStreamResponse.Error ?? "Unknown exception.")}."
                        };

                    return;
                }

                if (chunkStreamResponse.Result is null)
                {
                    this.Notification = new NotificationData()
                        {
                            Type = NotificationType.Warning,
                            Status = chunkStreamResponse.Status,
                            Message = $"Received empty data reponse ('{chunk.ChunkName}'."
                        };

                    return;
                }

                await this.downloadUploadHelper.WriteToFileAsync(writableStream, chunkStreamResponse.Result);
            }
        }
        finally
        {
            if (writableStream != default)
            {
                await this.downloadUploadHelper.FinishFileDownloadAsync(writableStream);
            }
        }
    }

    private async Task DownloadAsBlobUrlAsync(ContentMetadata attachment)
    {
        Console.WriteLine($"Started {nameof(DownloadAsBlobUrlAsync)}.");

        var dataStreamResponse = await this.apiClient.GetContentDataStreamAsync(this.compoundModel.Metadata.ObjectName, attachment.ContentName);
        if (dataStreamResponse.Status != "ok")
        {
            this.Notification = new NotificationData()
            {
                Type = NotificationType.Warning,
                Status = dataStreamResponse.Status,
                Message = $"Cannot download attachment: {(dataStreamResponse.Error ?? "Unknown exception.")}."
            };

            return;
        }

        if (dataStreamResponse.Result is null)
        {
            this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = dataStreamResponse.Status,
                    Message = $"Received empty data reponse."
                };

            return;
        }

        await this.downloadUploadHelper.DownloadFileFromStreamAsync(dataStreamResponse.Result, attachment.FileName, attachment.ContentType);
    }
}

