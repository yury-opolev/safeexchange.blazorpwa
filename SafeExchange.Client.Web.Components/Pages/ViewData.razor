@using SafeExchange.Client.Web.Components.Model
@using SafeExchange.Client.Web.Components.Helpers
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager NavManager
@inject ApiClient apiClient
@inject StateContainer StateContainer

@if (this.IsInProgress)
{
    <p>
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
        </div>
    </p>
}

@if (this.Notification != null)
{
<div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
    <p>
        <strong>@(this.Notification.Status ?? string.Empty)</strong>&nbsp; @(this.Notification.Message ?? string.Empty)
    </p>
    @if (!string.IsNullOrEmpty(this.Notification.ButtonText))
    {
        <hr>
        <p>
            <button class="btn btn-warning" type="button" disabled="@IsInProgress" @onclick="() => this.NavManager.NavigateTo(this.Notification.ButtonUri)">
                <span>@this.Notification.ButtonText</span>
            </button>
        </p>
    }
    <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
</div>
}

@if (this.inputModel != null)
{
<EditForm Model="@inputModel">
    <p>
        <InputTextArea class="col-12" rows="18" @bind-Value="inputModel.Data.Value" placeholder="Content" readonly />
    </p>

    <div class="collapsible-content">
        <button class="btn mb-2 d-inline-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAccessList" aria-expanded="false" aria-controls="collapseAccessList">
            &nbsp; Access List
        </button>
        <div class="collapse" id="collapseAccessList">
            <div class="card card-body">

                @foreach (var accessItem in inputModel.AccessList)
                {
                <div>
                    <div class="row">
                        <div class="col">
                            <InputText class="form-control" @bind-Value="accessItem.Subject" readonly />
                        </div>
                        <div class="col">
                            <InputText class="form-control" @bind-Value="accessItem.Permission" readonly />
                        </div>
                    </div>
                </div>
                }

                @if (inputModel.AccessList.Count == 0)
                {
                    <div>
                        - No access was granted to users -
                    </div>
                }

            </div>
        </div>
    </div>

    <p>
        <div class="d-flex mt-3 justify-content-center">
            <div class="btn-group" role="group" aria-label="Item buttons">
                <button class="btn btn-outline-primary" type="button" disabled="@IsInProgress" @onclick="FetchData"><i class="oi oi-reload"></i><span>&nbsp;Refresh</span></button>
                <button class="btn btn-outline-primary" type="button" disabled="@(!this.CanEditObject() || IsInProgress)" @onclick="EditObject"><i class="oi oi-pencil"></i><span>&nbsp; Edit</span></button>
            </div>
        </div>
    </p>
    </EditForm>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string ObjectName { get; set; }

    private AuthenticationState authenticationState;

    private NotificationData Notification;

    private bool IsInProgress;

    private SecretInput inputModel;

    protected override async Task OnInitializedAsync()
    {
        this.StateContainer.TakeNotification();

        this.ObjectName = this.ObjectName ?? string.Empty;
        this.StateContainer.SetCurrentPageHeader($"View '{this.ObjectName}'");

        this.authenticationState = await this.AuthenticationStateTask;
        await this.FetchData();
    }

    private async Task FetchData()
    {
        await this.FetchSecretAsync(this.ObjectName);
    }

    private bool CanEditObject()
    {
        var currentUserUpn = TokenHandler.GetName(authenticationState.User);
        if (string.IsNullOrEmpty(currentUserUpn) || !currentUserUpn.Contains("@"))
        {
            return true;
        }

        var accessList = this.inputModel?.AccessList;
        if (accessList == null)
        {
            return false;
        }

        foreach (var accessItem in accessList)
        {
            if (accessItem.Subject.Equals(currentUserUpn) &&
                (accessItem.Permission.Contains("Write") || accessItem.Permission.Contains("GrantAccess")))
            {
                return true;
            }
        }
        return false;
    }

    private void EditObject()
    {
        NavManager.NavigateTo($"editdata/{this.ObjectName}");
    }

    private async Task FetchSecretAsync(string objectName)
    {
        this.IsInProgress = true;
        try
        {
            var accessData = await apiClient.ReadAccessAsync(objectName);
            if (!"ok".Equals(accessData.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = accessData.Status,
                    Message = accessData.Error,
                    ButtonText = "unauthorized".Equals(accessData.Status) ? "Request Access" : string.Empty,
                    ButtonUri = this.CreateAccessRequestUri("Read")
                };
                return;
            }

            var secretData = await apiClient.GetSecretDataAsync(objectName);
            if (!"ok".Equals(secretData.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = secretData.Status,
                    Message = secretData.Error,
                    ButtonText = "unauthorized".Equals(secretData.Status) ? "Request Access" : string.Empty,
                    ButtonUri = this.CreateAccessRequestUri("Read")
                };
                return;
            }

            this.Notification = null;

            this.inputModel = new SecretInput()
            {
                Name = this.ObjectName,
                Data = new SecretDataInput()
                {
                    Value = secretData.Result.Secret,
                    ContentType = secretData.Result.ContentType,
                    DestroySettings = null
                },
                AccessList = new List<AccessDataInput>()
            };

            foreach (var accessItem in accessData.AccessList)
            {
                this.inputModel.AccessList.Add(new AccessDataInput() { Subject = accessItem.UserName, Permission = AccessDataInput.CreatePermissionsString(accessItem) });
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }

    private string CreateAccessRequestUri(string permissions)
    {
        return $"addrequest?subject={this.ObjectName}&permission={permissions}";
    }
}

