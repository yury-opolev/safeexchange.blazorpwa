@using SafeExchange.Client.Common.Model
@using SafeExchange.Client.Web.Components.Model

@inject NavigationManager NavigationManager
@inject StateContainer StateContainer

@if (this.Notification != null)
{
<div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
    @if (string.IsNullOrEmpty(this.Notification.CopyableUri))
    {
        <p>
            <strong>@(this.Notification.Status ?? string.Empty)</strong>&nbsp; @(this.Notification.Message ?? string.Empty)
        </p>
    }
    else
    {
        <CopyableContent Data="@this.Notification.CopyableUri">
            <strong>@(this.Notification.Status ?? string.Empty)</strong>
            @(this.Notification.Message ?? string.Empty):
            <a href="@this.Notification.CopyableUri" class="alert-link"><span>Link</span></a>
        </CopyableContent>
    }
    @if (!string.IsNullOrEmpty(this.Notification.ButtonText))
    {
        <hr>
        <p>
            <button class="btn btn-warning" type="button" @onclick="() => this.NavigationManager.NavigateTo(this.Notification.ButtonUri)">
                <span>@this.Notification.ButtonText</span>
            </button>
        </p>
    }
    <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
</div>
}

<p>
    <strong>Find secret:</strong>
</p>

<EditForm Model="@this.searchInput" OnValidSubmit="@ViewObject">
    <div class="row">
        <div class="col-md-8">
            <InputText class="form-control" @bind-Value="this.searchInput.SearchString" placeholder="Secret Name" aria-label="Secret To Search" />
        </div>
        <div class="col-md-4">
            <button class="btn btn-outline-success" type="submit" disabled="@this.StateContainer.IsInProgress" aria-label="Search">Search</button>
        </div>
    </div>

</EditForm>

@code {

    private NotificationData Notification;

    private SearchInput searchInput;

    protected override void OnInitialized()
    {
        this.StateContainer.IsInProgress = false;
        this.StateContainer.SetCurrentPageHeader($"Home");
        this.Notification = this.StateContainer.TakeNotification();
        this.searchInput = new SearchInput();
    }

    public void ViewObject()
    {
        if (string.IsNullOrEmpty(this.searchInput.SearchString))
        {
            //...
            return;
        }

        NavigationManager.NavigateTo($"viewdata/{this.searchInput.SearchString}");
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
