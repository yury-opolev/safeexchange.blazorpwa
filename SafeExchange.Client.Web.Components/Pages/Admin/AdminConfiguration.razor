@using SafeExchange.Client.Web.Components.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@implements IDisposable

@inject NavigationManager NavManager
@inject ApiClient apiClient
@inject StateContainer StateContainer

<div class="modal fade" id="confirmationDialog" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Update configuration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to update the configuration?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="SetConfigurationAsync">Yes</button>
            </div>
        </div>
    </div>
</div>

@if (this.IsInProgress)
{
    <p>
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
        </div>
    </p>
}

@if (this.Notification != null)
{
    <div class="alert alert-dismissible @(this.Notification.GetAlertClass() ?? "alert-primary")" role="alert">
        <p>
            <strong>@(this.Notification.Status ?? string.Empty)</strong>&nbsp; @(this.Notification.Message ?? string.Empty)
        </p>
        @if (!string.IsNullOrEmpty(this.Notification.ButtonText))
        {
            <hr>
            <p>
                <button class="btn btn-warning" type="button" disabled="@IsInProgress" @onclick="() => this.NavManager.NavigateTo(this.Notification.ButtonUri)">
                    <span>@this.Notification.ButtonText</span>
                </button>
            </p>
        }
        <button type="button" class="btn-close" @onclick="DismissNotification" aria-label="Close"></button>
    </div>
}

@if (this.Configuration != null)
{
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />

    <div class="mb-3 accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Administrators
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
                <div class="accordion-body">

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="administratorGroups">Administrator Groups</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.AdminGroups" aria-describedby="administratorGroups" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group">
                            <span class="input-group-text" id="administratorUsers">Administrator Users</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.AdminUsers" aria-describedby="administratorUsers" />
                        </div>
                    </p>

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Allowed Groups
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo">
                <div class="accordion-body">

                    <p>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" id="globalGroupsSwitch" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.Features.UseGroupsAuthorization" />
                            <label class="form-check-label" for="globalGroupsSwitch">Use 'Global Groups' Authorization</label>
                        </div>
                    </p>

                    <p>
                        <div class="input-group">
                            <span class="input-group-text" id="allowedGroups">Allowed Groups</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.WhitelistedGroups" aria-describedby="allowedGroups" />
                        </div>
                    </p>

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Web Push
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree">
                <div class="accordion-body">

                    <p>
                        <div class="form-check form-switch">
                            <InputCheckbox class="form-check-input" type="checkbox" id="notificationsSwitch" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.Features.UseNotifications" />
                            <label class="form-check-label" for="notificationsSwitch">Use WebPush Notifications</label>
                        </div>
                    </p>

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="vapidSubject">VAPID - Subject</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.VapidOptions.Subject" aria-describedby="vapidSubject" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="vapidPrivKey">VAPID - Private Key</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.VapidOptions.PrivateKey" aria-describedby="vapidPrivKey" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group">
                            <span class="input-group-text" id="vapidPubKey">VAPID - Public Key</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.VapidOptions.PublicKey" aria-describedby="vapidPubKey" />
                        </div>
                    </p>

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFour">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                    Cosmos DB
                </button>
            </h2>
            <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour">
                <div class="accordion-body">

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="subscriptionId">Subscription Id</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.CosmosDb.SubscriptionId" aria-describedby="subscriptionId" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="resourceGroupName">ResourceGroup Name</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.CosmosDb.ResourceGroupName" aria-describedby="resourceGroupName" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="accountName">Account Name</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.CosmosDb.AccountName" aria-describedby="accountName" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="cosmosDbEndpoint">CosmosDB Endpoint</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.CosmosDb.CosmosDbEndpoint" aria-describedby="cosmosDbEndpoint" />
                        </div>
                    </p>

                    <p>
                        <div class="input-group">
                            <span class="input-group-text" id="databaseName">Database Name</span>
                            <InputText class="form-control" disabled="@IsInProgress" @bind-Value="Configuration.ConfigurationData.CosmosDb.DatabaseName" aria-describedby="databaseName" />
                        </div>
                    </p>

                </div>
            </div>
        </div>
    </div>

    <p>
        <div class="p-2 d-flex justify-content-center">
            <button type="button" class="btn btn-primary mx-2" data-bs-toggle="modal" data-bs-target="#confirmationDialog" disabled="@(IsInProgress || !this.isValidData)">Update</button>
        </div>
    </p>

</EditForm>
}

@code {

    private NotificationData Notification;

    private bool IsInProgress;

    private ServiceConfigurationBundle Configuration;

    private EditContext editContext;

    private bool isValidData = true;

    protected override async Task OnInitializedAsync()
    {
        this.StateContainer.TakeNotification();

        this.StateContainer.SetCurrentPageHeader($"Configuration Settings");

        await this.GetConfigurationAsync();
    }

    public void Dispose()
    {
        if (this.editContext == null)
        {
            return;
        }

        editContext.OnFieldChanged -= this.HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        this.isValidData = this.IsCurrentDataValid();
    }

    private bool IsCurrentDataValid()
    {
        if (this.Configuration is null)
        {
            return false;
        }

        // TODO: remove after nested objects validation is available
        if (!StringParser.TryGetGuidList(this.Configuration.ConfigurationData.WhitelistedGroups, out _))
        {
            return false;
        }

        if (!StringParser.TryGetGuidList(this.Configuration.ConfigurationData.AdminGroups, out _))
        {
            return false;
        }

        if (!StringParser.TryGetGuidList(this.Configuration.ConfigurationData.AdminUsers, out _))
        {
            return false;
        }

        return true;
    }

    private async Task GetConfigurationAsync()
    {
        try
        {
            var response = await this.apiClient.GetConfigurationAsync();

            if (!"ok".Equals(response.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = response.Status,
                    Message = response.Error
                };
                return;
            }

            this.Configuration = response.Result;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }

        if (this.editContext == null)
        {
            this.editContext = new EditContext(this.Configuration);
            this.editContext.OnFieldChanged += this.HandleFieldChanged;
        }
    }

    private async Task SetConfigurationAsync()
    {
        if (this.Configuration is null)
        {
            return;
        }

        this.IsInProgress = true;

        try
        {
            var status = await this.apiClient.SetConfigurationAsync(this.Configuration);
            if (!"ok".Equals(status.Status))
            {
                this.Notification = new NotificationData()
                {
                    Type = NotificationType.Warning,
                    Status = status.Status,
                    Message = status.Error
                };
                return;
            }

            this.Notification = new NotificationData()
            {
                Type = NotificationType.Success,
                Status = "Success",
                Message = "Configuration updated successfully"
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            this.IsInProgress = false;
        }
    }

    public void DismissNotification()
    {
        this.Notification = null;
    }
}
